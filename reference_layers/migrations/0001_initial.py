# Generated by Django 3.2.14 on 2023-03-03 07:20

import django.contrib.gis.db.models.fields
from django.db import connection
from django.db import migrations, models
import django.db.models.deletion

# def create_label_views(apps, schema_editor):
#     '''adds new db views categorizing sinks by their depth. this is mostly to support
#     easier layering in geoserver'''

#     cursor = connection.cursor()

#     cursor.execute("CREATE MATERIALIZED VIEW reference_layers_county_labels AS "\
#             "SELECT CONCAT(name, ' County'), ST_Centroid(geom) FROM reference_layers_county; "\
#             "GRANT SELECT ON reference_layers_county_labels TO tileserver;")

#     return

# def remove_label_views(apps, schema_editor):
#     '''adds new db views categorizing sinks by their depth. this is mostly to support
#     easier layering in geoserver'''

#     cursor = connection.cursor()

#     cursor.execute("DROP MATERIALIZED VIEW IF EXISTS reference_layers_county_labels;")

#     return

class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fips', models.IntegerField()),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('state_name', models.CharField(blank=True, max_length=50, null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='PLSSTownship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dir', models.IntegerField()),
                ('twp', models.IntegerField()),
                ('rng', models.IntegerField()),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='PLSSSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dir', models.IntegerField()),
                ('twp', models.IntegerField()),
                ('rng', models.IntegerField()),
                ('sec', models.IntegerField()),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
                ('township', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='reference_layers.plsstownship')),
            ],
        ),
        migrations.CreateModel(
            name='PLSSQuarterSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dir', models.IntegerField()),
                ('twp', models.IntegerField()),
                ('rng', models.IntegerField()),
                ('sec', models.IntegerField()),
                ('qsec', models.IntegerField()),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='reference_layers.plsssection')),
            ],
        ),
        migrations.CreateModel(
            name='MinorCivilDivision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geoid', models.BigIntegerField()),
                ('ctv', models.CharField(choices=[('C', 'City'), ('T', 'Town'), ('V', 'Village')], max_length=1)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
                ('county', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='reference_layers.county')),
            ],
        ),
        # migrations.RunPython(create_label_views, remove_label_views)
    ]
