=====================
Web App Architecture
=====================

Early web interfaces for this project utilized the now-long-lost GeoExplorer suite put together by Boundless. As we gained experience with other web technologies, specifically Django + PostGIS + Geoserver, we eventually settled on a completely homespun application. This architecture facilitated the :ref:`Evaluating Sinks` activity, and overall worked quite well. The diagram below provides a high-level look at how we set things up:

diadiadiagram

To summarize: We created a Django web application with a PostGIS database backend that holds all of our sink(hole) location information. Separately, we setup Geoserver to read from the database and generate WMS endpoints that we could use in the Leaflet map frontend of the application. When people viewed the web map, they were seeing tiles generated by Geoserver. When they selected a sink for editing (choosing a sink type for it), their choice was submitted to the database via Django, and the map layer was refreshed to force Geoserver to update the style based on the new data.

